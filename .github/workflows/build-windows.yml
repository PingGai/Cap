name: Build • Cap Desktop (Windows x64)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120
    env:
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PNPM (v10.5.2)
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Rust (x86_64-pc-windows-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust
        uses: swatinem/rust-cache@v2
        with:
          shared-key: x86_64-pc-windows-msvc

      - name: Prepare env
        shell: pwsh
        run: |
          "VITE_ENVIRONMENT=production" | Out-File -FilePath .env -Encoding utf8 -Append
          "RUST_TARGET_TRIPLE=x86_64-pc-windows-msvc" | Out-File -FilePath .env -Encoding utf8 -Append

      # 仅下载 FFmpeg 6.1.x 共享版（与官方安装包一致的 ABI）
      - name: Download FFmpeg 6.1 shared (exact ABI)
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $candidates = @(
            # BtbN 的 6.1 “最新”共享版（abi 61/10/59/5/8/58）
            "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n6.1-latest-win64-gpl-shared-6.1.zip",
            "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n6.1-latest-win64-lgpl-shared-6.1.zip",
            # gyan.dev 的 6.1.1 full shared
            "https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.1.1-full_build-shared.zip",
            "https://dl.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.1.1-full_build-shared.zip"
          )
          function TryGet([string]$u,[string]$o){
            try{
              Write-Host "Trying: $u"
              Invoke-WebRequest -Uri $u -OutFile $o -UseBasicParsing -TimeoutSec 300
              return (Test-Path $o) -and ((Get-Item $o).Length -gt 5MB)
            }catch{
              Write-Warning $_.Exception.Message; return $false
            }
          }
          $ok=$false; $pkg="ffmpeg.zip"
          foreach($u in $candidates){ if(Test-Path $pkg){Remove-Item $pkg -Force}; if(TryGet $u $pkg){$ok=$true;break} }
          if(-not $ok){ throw "Failed to download FFmpeg 6.1 shared build." }

          # 解压并挑出我们需要的 8 个 DLL
          Expand-Archive -Path $pkg -DestinationPath "_ffmpeg" -Force
          $bin = Get-ChildItem -Recurse "_ffmpeg" | ? { $_.PSIsContainer -and $_.Name -ieq "bin" } | Select-Object -First 1
          if(-not $bin){ throw "FFmpeg bin/ not found." }

          $need = @(
            "avcodec-61.dll","avdevice-61.dll","avfilter-10.dll","avformat-61.dll",
            "avutil-59.dll","postproc-58.dll","swresample-5.dll","swscale-8.dll"
          )
          New-Item -ItemType Directory -Force -Path "apps/desktop/src-tauri" | Out-Null
          foreach($n in $need){
            $src = Join-Path $bin.FullName $n
            if(-not (Test-Path $src)){ throw "Missing required FFmpeg DLL in package: $n" }
            Copy-Item $src "apps/desktop/src-tauri\" -Force
          }
          Write-Host "Placed DLLs next to Cap.exe (src-tauri/):"
          Get-ChildItem "apps/desktop/src-tauri\*.dll" | Sort-Object Name | ft Name,Length -AutoSize

      # 生成无签名 tauri 配置：仅追加 assets/**，并把 DLL 放在 bundle.externalBin
      - name: Generate tauri config (no updater, bundle assets/** & externalBin)
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $base = if(Test-Path "tauri.prod.conf.json"){"tauri.prod.conf.json"}else{"tauri.conf.json"}
          $j = Get-Content $base -Raw | ConvertFrom-Json

          if($j.plugins -and $j.plugins.updater){ $j.plugins.PSObject.Properties.Remove('updater') }

          if(-not $j.bundle){ $j | Add-Member -Name bundle -Value ([ordered]@{}) -MemberType NoteProperty }
          if(-not ($j.bundle.PSObject.Properties.Name -contains 'resources')){
            $j.bundle | Add-Member -Name resources -Value @() -MemberType NoteProperty
          }
          if($j.bundle.resources -notcontains "assets/**"){ $j.bundle.resources += "assets/**" }

          $dlls = @(
            "avcodec-61.dll","avdevice-61.dll","avfilter-10.dll","avformat-61.dll",
            "avutil-59.dll","postproc-58.dll","swresample-5.dll","swscale-8.dll"
          )
          if(-not ($j.bundle.PSObject.Properties.Name -contains 'externalBin')){
            $j.bundle | Add-Member -Name externalBin -Value $dlls -MemberType NoteProperty
          } else { $j.bundle.externalBin = $dlls }

          $out = "tauri-nosign.prod.conf.json"
          $j | ConvertTo-Json -Depth 100 | Set-Content $out -Encoding utf8

          Write-Host "bundle.resources:"; $j.bundle.resources | % { Write-Host " - $_" }
          Write-Host "bundle.externalBin:"; $j.bundle.externalBin | % { Write-Host " - $_" }

      # 确认 assets 存在（apps/desktop/src-tauri/assets）
      - name: Preflight check
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          if(-not (Test-Path ".\assets")){ throw "assets folder missing at src-tauri/assets" }
          Write-Host "assets OK, dll OK."

      # 去掉 Tauri 的本地签名文件，避免要求私钥
      - name: Neutralize Tauri signing
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          if (Test-Path ".tauri\key.public") { Remove-Item ".tauri\key.public" -Force }
          if (Test-Path ".tauri\key.enc")    { Remove-Item ".tauri\key.enc" -Force }

      # 构建（使用我们生成的 no-sign 配置）
      - name: Build desktop (Tauri)
        working-directory: apps/desktop
        shell: pwsh
        env:
          CI: "false"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PUBLIC_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        run: |
          pnpm -w cap-setup
          $cfg = if (Test-Path "src-tauri/tauri-nosign.prod.conf.json") { "src-tauri/tauri-nosign.prod.conf.json" } else { "src-tauri/tauri-nosign.conf.json" }
          pnpm tauri build --target x86_64-pc-windows-msvc --config $cfg

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cap-windows-x64
          path: |
            target/**/bundle/**/*.msi
            target/**/bundle/**/*.exe
            target/**/bundle/**/*.zip
            apps/desktop/src-tauri/target/**/bundle/**/*.msi
            apps/desktop/src-tauri/target/**/bundle/**/*.exe
            apps/desktop/src-tauri/target/**/bundle/**/*.zip
          if-no-files-found: warn
