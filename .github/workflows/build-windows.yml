name: Build • Cap Desktop (Windows x64)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-windows:
    runs-on: windows-latest          # GitHub 官方 windows-latest = Server 2022
    timeout-minutes: 120

    env:
      NODE_ENV: production

    steps:
# ───────────────────────────────────── ① 代码 + Node + pnpm ─────────────────────────────────────
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up pnpm (v10.5.2 – 同官方锁版)
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Set up Node.js (20 – 与官方一致)
        uses: actions/setup-node@v4
        with:
          node-version: 20           # 官方工作流亦固定 20
          cache: pnpm

      - name: Install JS deps (frozen)
        run: pnpm install --frozen-lockfile

# ───────────────────────────────────── ② Rust toolchain & cache ──────────────────────────────────
      - name: Set up Rust (x86_64-pc-windows-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust build
        uses: swatinem/rust-cache@v2
        with:
          shared-key: x86_64-pc-windows-msvc

# ───────────────────────────────────── ③ 运行时变量 ─────────────────────────────────────────────
      - name: Prepare .env
        shell: pwsh
        run: |
          "VITE_ENVIRONMENT=production"                       | Out-File .env -Encoding utf8 -Append
          "RUST_TARGET_TRIPLE=x86_64-pc-windows-msvc"         | Out-File .env -Encoding utf8 -Append

# ───────────────────────────────────── ④ FFmpeg 6.1.x (61/59 ABI) ───────────────────────────────
      - name: Fetch FFmpeg 6.1.x full-shared (robust mirrors)
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $mirrors = @(
            # 固定版本（最稳定）——GyanD/codexffmpeg
            "https://github.com/GyanD/codexffmpeg/releases/download/6.1.1/ffmpeg-6.1.1-full_build-shared.zip",
            # 回落到 6.1
            "https://github.com/GyanD/codexffmpeg/releases/download/6.1/ffmpeg-6.1-full_build-shared.zip"
          )
          function Get-Dll([string]$name){
            $f = Get-ChildItem -Recurse _ffmpeg -Filter $name | Select-Object -First 1
            if(-not $f){ throw "Required FFmpeg DLL not found in archive: $name" }
            $f.FullName
          }
          # 下载
          $ok=$false; $pkg="ffmpeg.zip"
          foreach($u in $mirrors){
            if(Test-Path $pkg){ Remove-Item $pkg -Force }
            try{
              Write-Host "Trying: $u"
              Invoke-WebRequest -Uri $u -OutFile $pkg -UseBasicParsing -TimeoutSec 300
              if((Get-Item $pkg).Length -gt 5MB){ $ok=$true; break }
            }catch{ Write-Warning "Download failed: $u" }
          }
          if(-not $ok){ throw "Failed to download FFmpeg shared build." }

          # 解压
          Expand-Archive $pkg -DestinationPath _ffmpeg -Force
          # 预期 DLL 名（Cap 0.3.72 官方使用 61/59/58 ABI）
          $dllList = @(
            "avcodec-61.dll","avdevice-61.dll","avfilter-10.dll","avformat-61.dll",
            "avutil-59.dll","postproc-58.dll","swresample-5.dll","swscale-8.dll"
          )
          $dst = "apps/desktop/src-tauri"
          foreach($d in $dllList){
            Copy-Item (Get-Dll $d) $dst -Force
          }
          Write-Host "FFmpeg DLLs placed beside Cap.exe:"
          Get-ChildItem "$dst\*.dll" | Select-Object Name,Length | Format-Table -AutoSize

# ───────────────────────────────────── ⑤ 生成“无 Updater”生产 Tauri 配置 ────────────────────────
      - name: Mutate tauri.conf (keep assets/**, drop Updater)
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $base = (Test-Path tauri.prod.conf.json) ? "tauri.prod.conf.json" : "tauri.conf.json"
          $json = Get-Content $base -Raw | ConvertFrom-Json
          if($json.plugins -and $json.plugins.updater){
            $json.plugins.PSObject.Properties.Remove('updater')
          }
          if(-not $json.bundle){ $json | Add-Member bundle (@{}) }
          if(-not $json.bundle.resources){ $json.bundle.resources = @() }
          if($json.bundle.resources -notcontains "assets/**"){ $json.bundle.resources += "assets/**" }
          if($json.bundle.resources -notcontains "*.dll"){   $json.bundle.resources += "*.dll" }

          $out = ($base -eq "tauri.prod.conf.json") ? "tauri-nosign.prod.conf.json" : "tauri-nosign.conf.json"
          $json | ConvertTo-Json -Depth 100 | Set-Content $out -Encoding utf8
          Write-Host "bundle.resources:"; $json.bundle.resources

# ───────────────────────────────────── ⑥ 构建 Desktop ───────────────────────────────────────────
      - name: Neutralize Tauri signing
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          Remove-Item .tauri\key.* -Force -ErrorAction SilentlyContinue

      - name: Build Cap Desktop (Tauri + SolidStart SSR)
        shell: pwsh
        working-directory: apps/desktop
        env:
          CI: "false"
        run: |
          pnpm -w cap-setup
          $cfg = Test-Path "src-tauri/tauri-nosign.prod.conf.json" ? "src-tauri/tauri-nosign.prod.conf.json" : "src-tauri/tauri-nosign.conf.json"
          pnpm tauri build --target x86_64-pc-windows-msvc --config $cfg

# ───────────────────────────────────── ⑦ 上传产物 ───────────────────────────────────────────────
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cap-windows-x64
          path: |
            target/**/bundle/**/*.{msi,exe,zip}
            apps/desktop/src-tauri/target/**/bundle/**/*.{msi,exe,zip}
          if-no-files-found: warn
