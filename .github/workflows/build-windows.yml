name: Build • Cap Desktop (Windows x64, official-like)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 90
    env:
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # pnpm 先装，才能启用 setup-node 的 pnpm 缓存
      - name: Set up PNPM (v10.5.2)
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      # 项目要求 Node 24
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Rust (x86_64-pc-windows-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust
        uses: swatinem/rust-cache@v2
        with:
          shared-key: x86_64-pc-windows-msvc

      # 生产环境，避免 "Cap - Development"
      - name: Prepare env
        shell: pwsh
        run: |
          "VITE_ENVIRONMENT=production" | Out-File -FilePath .env -Encoding utf8 -Append
          "RUST_TARGET_TRIPLE=x86_64-pc-windows-msvc" | Out-File -FilePath .env -Encoding utf8 -Append

      # 与官方一致：执行 repo 的 setup（会拉取本地编译所需静态/头文件）
      - name: Run repo setup
        run: pnpm -w cap-setup

      # 固定使用 gyan.dev 的 full_build-shared（与官方体积一致的那套）
      # 如果该 URL 偶发抽风，下面会多地址重试；只挑出那 9 个 DLL 放到 src-tauri 根目录
      - name: Fetch official-like FFmpeg DLLs (full/shared) and flatten
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $urls = @(
            # 固定 7.1.1 full_build-shared（与 avcodec-61/avfilter-10 等版本号匹配）
            "https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-7.1.1-full_build-shared.zip",
            # 兜底：release/generic 的 full 包
            "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z",
            "https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-full.7z",
            # 再兜底：BtbN 全功能共享版（不一定与体积完全一致，但不启用时不会触发）
            "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl-shared.zip"
          )

          function TryDownload($u,$out){
            for($i=1;$i -le 3;$i++){
              try{
                Write-Host "Try ($i/3): $u"
                Invoke-WebRequest -Uri $u -OutFile $out -UseBasicParsing -TimeoutSec 300
                if((Test-Path $out) -and ((Get-Item $out).Length -gt 5MB)){ return $true }
              }catch{
                Write-Warning $_.Exception.Message
                try{
                  & curl.exe -L --retry 3 --retry-all-errors -o $out $u
                  if((Test-Path $out) -and ((Get-Item $out).Length -gt 5MB)){ return $true }
                }catch{ Write-Warning "curl failed" }
              }
              Start-Sleep 2
            }
            return $false
          }

          $pkg = "ffmpeg.pkg"
          Remove-Item $pkg -ErrorAction SilentlyContinue
          $ok = $false
          foreach($u in $urls){ if(TryDownload $u $pkg){ $ok=$true; break } }
          if(-not $ok){ throw "Failed to download FFmpeg full/shared." }

          New-Item -ItemType Directory -Force -Path "_ffmpeg" | Out-Null
          if($pkg -like "*.zip"){ Expand-Archive -Path $pkg -DestinationPath "_ffmpeg" -Force }
          else{
            $seven = "C:\Program Files\7-Zip\7z.exe"
            if(-not (Test-Path $seven)){ throw "7-Zip not found on runner" }
            & "$seven" x $pkg "-o_ffmpeg" -y | Out-Null
          }

          $bin = Get-ChildItem -Recurse "_ffmpeg" | Where-Object { $_.PSIsContainer -and ($_.Name -ieq "bin") } | Select-Object -First 1
          if(-not $bin){ throw "bin folder not found in FFmpeg package" }

          $want = @(
            "avcodec-61.dll",
            "avdevice-61.dll",
            "avfilter-10.dll",
            "avformat-61.dll",
            "avutil-59.dll",
            "postproc-58.dll",
            "swresample-5.dll",
            "swscale-8.dll"
          )

          # 扁平到 src-tauri 根目录（最终会被 externalBin 复制到 Cap.exe 同级）
          $dst = "apps/desktop/src-tauri"
          foreach($n in $want){
            $src = Join-Path $bin.FullName $n
            if(Test-Path $src){ Copy-Item $src (Join-Path $dst $n) -Force }
            else{ Write-Warning "missing $n in package" }
          }

          Write-Host "DLLs staged to src-tauri (size):"
          Get-ChildItem $dst/*.dll | Sort-Object Length -Descending | Select-Object Name,Length | Format-Table -AutoSize

      # 生成 “无签名 + 正确资源 + externalBin 指定确切文件名” 的临时配置
      - name: Generate tauri config (no-sign, assets/**, externalBin exact)
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $base = if (Test-Path "tauri.prod.conf.json") { "tauri.prod.conf.json" } else { "tauri.conf.json" }
          $json = Get-Content $base -Raw | ConvertFrom-Json

          # 关闭 updater，避免签名校验
          if ($json.plugins -and $json.plugins.updater) {
            $json.plugins.PSObject.Properties.Remove('updater')
          }

          # 确保 bundle 节点存在
          if (-not $json.bundle) {
            $json | Add-Member -Name bundle -Value ([ordered]@{}) -MemberType NoteProperty
          }

          # 确保 resources 数组存在，然后追加 assets/**
          if (-not ($json.bundle.PSObject.Properties.Name -contains 'resources')) {
            $json.bundle | Add-Member -Name resources -Value @() -MemberType NoteProperty
          }
          if ($json.bundle.resources -notcontains "assets/**") {
            $json.bundle.resources += "assets/**"
          }

          # 确保 windows 节点存在
          if (-not ($json.bundle.PSObject.Properties.Name -contains 'windows')) {
            $json.bundle | Add-Member -Name windows -Value ([ordered]@{}) -MemberType NoteProperty
          }

          # 明确列出 8 个 DLL：路径相对 src-tauri/
          $dlls = @(
            "src-tauri/avcodec-61.dll",
            "src-tauri/avdevice-61.dll",
            "src-tauri/avfilter-10.dll",
            "src-tauri/avformat-61.dll",
            "src-tauri/avutil-59.dll",
            "src-tauri/postproc-58.dll",
            "src-tauri/swresample-5.dll",
            "src-tauri/swscale-8.dll"
          )

          if (-not ($json.bundle.windows.PSObject.Properties.Name -contains 'externalBin')) {
            $json.bundle.windows | Add-Member -Name externalBin -Value $dlls -MemberType NoteProperty
          } else {
            # 覆盖为我们指定的 8 个，避免混入其它库
            $json.bundle.windows.externalBin = $dlls
          }

          $out = "tauri-nosign.prod.conf.json"
          $json | ConvertTo-Json -Depth 100 | Set-Content $out -Encoding utf8

          Write-Host ">> resources:"
          $json.bundle.resources | ForEach-Object { Write-Host "   - $_" }
          Write-Host ">> externalBin:"
          $json.bundle.windows.externalBin | ForEach-Object { Write-Host "   - $_" }
          Write-Host "Tauri config generated to $out"

      - name: Build desktop (Tauri)
        working-directory: apps/desktop
        shell: pwsh
        env:
          CI: "false"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PUBLIC_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        run: |
          pnpm tauri build --target x86_64-pc-windows-msvc --config src-tauri/tauri-nosign.prod.conf.json

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cap-windows-x64
          path: |
            target/**/bundle/**/*.msi
            target/**/bundle/**/*.exe
            target/**/bundle/**/*.zip
            apps/desktop/src-tauri/target/**/bundle/**/*.msi
            apps/desktop/src-tauri/target/**/bundle/**/*.exe
            apps/desktop/src-tauri/target/**/bundle/**/*.zip
          if-no-files-found: warn
