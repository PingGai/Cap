name: Build • Cap Desktop (Windows x64)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 75

    env:
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 先装 pnpm，再装 node 并启用 pnpm 缓存（顺序很重要）
      - name: Set up PNPM (v10.5.2)
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Rust (x86_64-pc-windows-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust
        uses: swatinem/rust-cache@v2
        with:
          shared-key: x86_64-pc-windows-msvc

      - name: Prepare env
        shell: pwsh
        run: |
          "VITE_ENVIRONMENT=production" | Out-File -FilePath .env -Encoding utf8 -Append
          "RUST_TARGET_TRIPLE=x86_64-pc-windows-msvc" | Out-File -FilePath .env -Encoding utf8 -Append

      # ① 下载 FFmpeg 6.x 的 Windows x64 shared 预编译包，并把 bin/*.dll 放到打包资源目录
      #   （使用 BtbN 的自动构建；任何 6.x “shared” 都带 avcodec-61/avfilter-10 等）
      - name: Download FFmpeg shared DLLs
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $ProgressPreference = 'SilentlyContinue'
          New-Item -ItemType Directory -Force -Path ".\ffmpeg-bin" | Out-Null
          # 选一个稳定的 shared 包；如需固定版本，可把 URL 换成指定 tag 的 zip
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-n6.1-latest-win64-lgpl-shared-6.1.zip"
          Invoke-WebRequest -Uri $url -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath ".\_ffmpeg" -Force
          # 把 bin 目录下全部 DLL 复制到打包资源目录（我们稍后在 tauri 配置里把这些资源并入）
          $bin = Get-ChildItem -Recurse ".\_ffmpeg" | Where-Object { $_.PSIsContainer -and $_.FullName -match "\\bin$" } | Select-Object -First 1
          Copy-Item "$($bin.FullName)\*.dll" ".\ffmpeg-bin\" -Force
          Write-Host "Copied FFmpeg DLLs:"
          Get-ChildItem ".\ffmpeg-bin" | % { Write-Host $_.Name }

      # ② 生成“无 Updater”的生产配置，并把 ffmpeg-bin 列到 bundle.resources，让 DLL 被打进安装包
      - name: Disable Updater & inject FFmpeg resources
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $prod = Test-Path tauri.prod.conf.json
          $src  = if ($prod) { "tauri.prod.conf.json" } else { "tauri.conf.json" }
          $conf = Get-Content $src -Raw | ConvertFrom-Json

          # 移除 updater，绕过签名需求
          if ($conf.plugins -and $conf.plugins.updater) {
            $conf.plugins.PSObject.Properties.Remove('updater')
          }

          # 确保 bundle.resources 存在，并把 ffmpeg-bin/*.dll 注入
          if (-not $conf.bundle) { $conf | Add-Member -MemberType NoteProperty -Name bundle -Value (@{}) }
          if (-not $conf.bundle.resources) { $conf.bundle | Add-Member -MemberType NoteProperty -Name resources -Value (@()) }
          # 避免重复添加
          $res = $conf.bundle.resources | Where-Object { $_ -eq "src-tauri/ffmpeg-bin/*.dll" }
          if (-not $res) {
            $conf.bundle.resources += "src-tauri/ffmpeg-bin/*.dll"
          }

          $out = if ($prod) { "tauri-nosign.prod.conf.json" } else { "tauri-nosign.conf.json" }
          $conf | ConvertTo-Json -Depth 100 | Set-Content $out
          Write-Host "Written config: $out"

      # ③ 构建（使用我们生成的无签名“生产”配置）
      - name: Build desktop (Tauri)
        working-directory: apps/desktop
        shell: pwsh
        run: |
          pnpm -w cap-setup
          $cfg = if (Test-Path "src-tauri/tauri-nosign.prod.conf.json") { "src-tauri/tauri-nosign.prod.conf.json" } else { "src-tauri/tauri-nosign.conf.json" }
          pnpm tauri build --target x86_64-pc-windows-msvc --config $cfg
        env:
          CI: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ④ 上传产物（同时匹配根 target/** 和 src-tauri/target/** 两种输出位置）
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cap-windows-x64
          path: |
            target/**/bundle/**/*.msi
            target/**/bundle/**/*.exe
            target/**/bundle/**/*.zip
            apps/desktop/src-tauri/target/**/bundle/**/*.msi
            apps/desktop/src-tauri/target/**/bundle/**/*.exe
            apps/desktop/src-tauri/target/**/bundle/**/*.zip
          if-no-files-found: warn
