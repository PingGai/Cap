name: Build • Cap Desktop (Windows x64)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    env:
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 与官方一致：先装 pnpm，再 setup-node 开启 pnpm 缓存
      - name: Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Set up Node.js (20.x)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm

      - name: Install JS deps
        run: pnpm install --frozen-lockfile

      - name: Set up Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust
        uses: swatinem/rust-cache@v2
        with:
          shared-key: x86_64-pc-windows-msvc

      - name: Prepare env (production)
        shell: pwsh
        run: |
          "VITE_ENVIRONMENT=production" | Out-File -FilePath .env -Encoding utf8 -Append
          "RUST_TARGET_TRIPLE=x86_64-pc-windows-msvc" | Out-File -FilePath .env -Encoding utf8 -Append

      # 交给仓库自带脚本下载并布置 FFmpeg 7.1（会在 beforeBundle 阶段把 DLL 放到 EXE 同级，assets 也会随官方配置打包）
      - name: Project setup (FFmpeg, headers, etc.)
        run: pnpm -w cap-setup

      # 仅在 CI 里生成“无签名”的临时配置（不改仓库原文件）
      - name: Create no-sign Tauri config (remove updater only)
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $base = if (Test-Path "tauri.prod.conf.json") { "tauri.prod.conf.json" } else { "tauri.conf.json" }
          $json = Get-Content $base -Raw | ConvertFrom-Json

          if ($json.plugins -and $json.plugins.updater) {
            $json.plugins.PSObject.Properties.Remove('updater')
          }

          $out = "tauri-nosign.prod.conf.json"
          $json | ConvertTo-Json -Depth 100 | Set-Content $out -Encoding utf8
          Write-Host "Using base: $base -> Generated: $out"

      # 防止 CLI 检测到仓库里的公钥后强制要求私钥
      - name: Neutralize Tauri signing
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          if (Test-Path ".tauri\key.public") { Remove-Item ".tauri\key.public" -Force }
          if (Test-Path ".tauri\key.enc")    { Remove-Item ".tauri\key.enc" -Force }

      - name: Build Cap Desktop (Tauri)
        working-directory: apps/desktop
        shell: pwsh
        env:
          CI: "false"
          # 显式清空签名变量，避免误判
          TAURI_SIGNING_PUBLIC_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm tauri build --target x86_64-pc-windows-msvc --config "src-tauri/tauri-nosign.prod.conf.json"

      # 兼容两种可能的输出路径
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cap-windows-x64
          path: |
            target/**/bundle/**/*.msi
            target/**/bundle/**/*.exe
            target/**/bundle/**/*.zip
            apps/desktop/src-tauri/target/**/bundle/**/*.msi
            apps/desktop/src-tauri/target/**/bundle/**/*.exe
            apps/desktop/src-tauri/target/**/bundle/**/*.zip
          if-no-files-found: warn
