name: Build • Cap Desktop (Windows x64)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    env:
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 与官方一致：pnpm 10.5.2 + Node 20（先装 pnpm 再 setup-node 才能启用 pnpm 缓存）
      - name: Set up PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Set up Node.js (20.x)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm

      - name: Install JS deps
        run: pnpm install --frozen-lockfile

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust
        uses: swatinem/rust-cache@v2
        with:
          shared-key: x86_64-pc-windows-msvc

      # 生产环境变量
      - name: Prepare env (production)
        shell: pwsh
        run: |
          "VITE_ENVIRONMENT=production"               | Out-File -FilePath .env -Encoding utf8 -Append
          "RUST_TARGET_TRIPLE=x86_64-pc-windows-msvc" | Out-File -FilePath .env -Encoding utf8 -Append

      # 官方脚本：下载并准备 FFmpeg（头文件/导入库会进 target/native-deps）
      - name: Run official cap-setup (downloads ffmpeg-7.1.zip)
        run: pnpm -w cap-setup

      # 从 cap-setup 落到 target/** 的 ffmpeg-7.1 包里，把 8 个 DLL 扫出来并复制到 src-tauri 根（安装后与 Cap.exe 同级）
      - name: Collect FFmpeg 7.1 DLLs beside Cap.exe
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $need = @(
            "avcodec-61.dll","avdevice-61.dll","avfilter-10.dll","avformat-61.dll",
            "avutil-59.dll","postproc-58.dll","swresample-5.dll","swscale-8.dll"
          )

          $dst = "apps/desktop/src-tauri"
          New-Item -ItemType Directory -Force -Path $dst | Out-Null

          foreach($n in $need){
            $hit = Get-ChildItem -Recurse -Path "target" -File -Filter $n |
              Where-Object { $_.FullName -match "\\bin\\.*$" } | Select-Object -First 1
            if(-not $hit){
              $hit = Get-ChildItem -Recurse -Path "." -File -Filter $n |
                Where-Object { $_.FullName -match "\\bin\\.*$" } | Select-Object -First 1
            }
            if(-not $hit){ throw "Required FFmpeg DLL not found: $n" }
            Copy-Item $hit.FullName $dst -Force
          }

          Write-Host "FFmpeg DLLs placed in $dst :"
          Get-ChildItem "$dst\*.dll" | Sort-Object Name | Select-Object Name,Length | Format-Table -AutoSize

      # 生成“无签名 + 正确节点上追加配置”的临时 Tauri 配置（不改原文件）
      - name: Create no-sign Tauri config (fix resources path & ensure externalBin)
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          # apps/desktop/src-tauri 下执行
          $base = if (Test-Path "tauri.prod.conf.json") { "tauri.prod.conf.json" } else { "tauri.conf.json" }
          $json = Get-Content $base -Raw | ConvertFrom-Json

          # 1) 移除 updater（你 config 在 plugins 顶层，v2 没有 tauri.plugins）
          if ($json.plugins -and $json.plugins.updater) {
            $json.plugins.PSObject.Properties.Remove('updater')
          }

          # 2) 确保 bundle 存在
          if (-not $json.bundle) {
            $json | Add-Member -MemberType NoteProperty -Name bundle -Value (@{})
          }

          # 3) 规范化并合并 resources：
          #    - 若为“对象映射”，新增 "assets/**": "assets/"
          #    - 若为“字符串数组”，新增 "assets/**"
          if (-not ($json.bundle.PSObject.Properties.Name -contains 'resources')) {
            # 默认用“对象映射”，兼容通配到指定目录
            $json.bundle | Add-Member -MemberType NoteProperty -Name resources -Value (@{})
          }
          $resources = $json.bundle.resources

          if ($resources -is [array]) {
            if (-not ($resources -contains "assets/**")) {
              $json.bundle.resources += "assets/**"
            }
          } else {
            # PSCustomObject 映射：只在缺失时添加，避免覆盖你已有的 backgrounds/rive 规则
            if (-not ($resources.PSObject.Properties.Name -contains "assets/**")) {
              $resources | Add-Member -MemberType NoteProperty -Name "assets/**" -Value "assets/"
            }
          }

          # 4) externalBin：把 8 个 FFmpeg DLL 声明为外部二进制，确保安装后与 EXE 同级
          $dlls = @(
            "avcodec-61.dll","avdevice-61.dll","avfilter-10.dll","avformat-61.dll",
            "avutil-59.dll","postproc-58.dll","swresample-5.dll","swscale-8.dll"
          )
          if (-not ($json.bundle.PSObject.Properties.Name -contains 'externalBin')) {
            $json.bundle | Add-Member -MemberType NoteProperty -Name externalBin -Value (@())
          }
          foreach ($n in $dlls) {
            if (-not ($json.bundle.externalBin -contains $n)) {
              $json.bundle.externalBin += $n
            }
          }

          # 5) 写出临时配置并打印关键信息
          $out = "tauri-nosign.prod.conf.json"
          $json | ConvertTo-Json -Depth 100 | Set-Content $out -Encoding utf8

          Write-Host "Using base: $base -> Generated: $out"
          if ($json.bundle.resources -is [array]) {
            Write-Host "bundle.resources (array):"
            $json.bundle.resources | % { Write-Host " - $_" }
          } else {
            Write-Host "bundle.resources (map):"
            $json.bundle.resources.PSObject.Properties | % { Write-Host " - $($_.Name) -> $($_.Value)" }
          }
          Write-Host "bundle.externalBin:"; $json.bundle.externalBin | % { Write-Host " - $_" }


      # 起飞前检查：确保 assets 与 DLL 都就位
      - name: Preflight (assert DLLs & assets exist)
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          if (-not (Test-Path ".\assets")) { throw "assets folder missing (apps/desktop/src-tauri/assets)" }
          $dlls = @(
            "avcodec-61.dll","avdevice-61.dll","avfilter-10.dll","avformat-61.dll",
            "avutil-59.dll","postproc-58.dll","swresample-5.dll","swscale-8.dll"
          )
          foreach ($n in $dlls) {
            if (-not (Test-Path ".\$n")) { throw "missing DLL: $n (must be beside EXE)" }
          }
          Write-Host "Assets OK, DLLs OK."

      # 关闭签名（CI 没有私钥）
      - name: Neutralize Tauri signing
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          if (Test-Path ".tauri\key.public") { Remove-Item ".tauri\key.public" -Force }
          if (Test-Path ".tauri\key.enc")    { Remove-Item ".tauri\key.enc" -Force }

      # 构建（使用上面生成的 no-sign 配置）
      - name: Build Cap Desktop
        working-directory: apps/desktop
        shell: pwsh
        env:
          CI: "false"
          TAURI_SIGNING_PUBLIC_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm tauri build --target x86_64-pc-windows-msvc --config "src-tauri/tauri-nosign.prod.conf.json"

      # 上传产物（兼容两种输出路径）
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cap-windows-x64
          path: |
            target/**/bundle/**/*.msi
            target/**/bundle/**/*.exe
            target/**/bundle/**/*.zip
            apps/desktop/src-tauri/target/**/bundle/**/*.msi
            apps/desktop/src-tauri/target/**/bundle/**/*.exe
            apps/desktop/src-tauri/target/**/bundle/**/*.zip
          if-no-files-found: warn
