name: Build - Cap Desktop (Windows x64)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 120

    env:
      NODE_ENV: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up PNPM (v10.5.2)
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Rust (x86_64-pc-windows-msvc)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust
        uses: swatinem/rust-cache@v2
        with:
          shared-key: x86_64-pc-windows-msvc

      - name: Prepare env
        shell: pwsh
        run: |
          "VITE_ENVIRONMENT=production" | Out-File -FilePath .env -Encoding utf8 -Append
          "RUST_TARGET_TRIPLE=x86_64-pc-windows-msvc" | Out-File -FilePath .env -Encoding utf8 -Append

      # ==== 下载“完整共享版” FFmpeg 7.1.1（优先 BtbN，失败回退 Gyan）====
      - name: Download FFmpeg full shared (7.1.1)
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $urls = @(
            "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n7.1.1-latest-win64-gpl-shared-7.1.zip",
            "https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2024-10-01-12-00/ffmpeg-n7.1.1-latest-win64-gpl-shared-7.1.zip",
            "https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-7.1.1-full_build-shared.zip"
          )
          $ok = $false
          foreach ($u in $urls) {
            try {
              Write-Host "Try: $u"
              Invoke-WebRequest -Uri $u -OutFile "ffmpeg.zip" -UseBasicParsing -TimeoutSec 300
              if ((Test-Path ffmpeg.zip) -and ((Get-Item ffmpeg.zip).Length -gt 5MB)) { $ok = $true; break }
            } catch { Write-Warning "Download failed: $u" }
          }
          if (-not $ok) { throw "Failed to download a full shared FFmpeg build." }

          Expand-Archive -Path ffmpeg.zip -DestinationPath _ffmpeg -Force
          $bin = Get-ChildItem -Recurse "_ffmpeg" | Where-Object { $_.PSIsContainer -and ($_.Name -ieq "bin") } | Select-Object -First 1
          if (-not $bin) { throw "FFmpeg bin folder not found in archive." }

          New-Item -ItemType Directory -Force -Path "apps/desktop/src-tauri/ffmpeg-bin" | Out-Null
          Copy-Item "$($bin.FullName)\*.dll" "apps/desktop/src-tauri/ffmpeg-bin\" -Force
          # 扁平化到 src-tauri 根：安装后与 Cap.exe 同级，Windows Loader 可直接加载
          Copy-Item "$($bin.FullName)\*.dll" "apps/desktop/src-tauri\" -Force

          Write-Host "DLLs next to Cap.exe:"
          Get-ChildItem "apps/desktop/src-tauri\*.dll" | % { Write-Host $_.Name }

      # ==== 禁用 Updater；追加 *.dll 到 bundle.resources（不覆盖原资源）====
      - name: Disable Updater and append resources
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $useProd = Test-Path tauri.prod.conf.json
          $src = if ($useProd) { "tauri.prod.conf.json" } else { "tauri.conf.json" }
          $conf = Get-Content $src -Raw | ConvertFrom-Json

          if ($conf.plugins -and $conf.plugins.updater) {
            $conf.plugins.PSObject.Properties.Remove('updater')
          }
          if (-not $conf.bundle) { $conf | Add-Member -MemberType NoteProperty -Name bundle -Value (@{}) }
          if (-not $conf.bundle.resources) { $conf.bundle | Add-Member -MemberType NoteProperty -Name resources -Value (@()) }

          # 1) 确保 assets/** 被纳入（保留原配置，若缺失则追加）
          if (-not ($conf.bundle.resources | Where-Object { $_ -eq "assets/**" })) {
            $conf.bundle.resources += "assets/**"
          }
          # 2) 追加根目录 *.dll（让 FFmpeg 与 Cap.exe 同级）
          if (-not ($conf.bundle.resources | Where-Object { $_ -eq "*.dll" })) {
            $conf.bundle.resources += "*.dll"
          }

          $out = if ($useProd) { "tauri-nosign.prod.conf.json" } else { "tauri-nosign.conf.json" }
          $conf | ConvertTo-Json -Depth 100 | Set-Content $out
          Write-Host "bundle.resources:"
          ($conf.bundle.resources) | % { Write-Host " - $_" }

      - name: Preflight check (DLLs & assets)
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          $dlls = Get-ChildItem ".\*.dll" -ErrorAction SilentlyContinue
          if (-not $dlls -or $dlls.Count -eq 0) { throw "no DLLs in src-tauri root" }
          if (-not (Test-Path ".\assets")) { throw "assets folder missing (apps/desktop/src-tauri/assets)" }
          Write-Host "DLL count: $($dlls.Count)"
          Write-Host "Has assets: OK"

      - name: Neutralize Tauri signing
        shell: pwsh
        working-directory: apps/desktop/src-tauri
        run: |
          if (Test-Path ".tauri\key.public") { Remove-Item ".tauri\key.public" -Force }
          if (Test-Path ".tauri\key.enc")    { Remove-Item ".tauri\key.enc" -Force }

      - name: Build desktop (Tauri)
        working-directory: apps/desktop
        shell: pwsh
        env:
          CI: "false"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PUBLIC_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        run: |
          pnpm -w cap-setup
          $cfg = if (Test-Path "src-tauri/tauri-nosign.prod.conf.json") { "src-tauri/tauri-nosign.prod.conf.json" } else { "src-tauri/tauri-nosign.conf.json" }
          pnpm tauri build --target x86_64-pc-windows-msvc --config $cfg

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cap-windows-x64
          path: |
            target/**/bundle/**/*.msi
            target/**/bundle/**/*.exe
            target/**/bundle/**/*.zip
            apps/desktop/src-tauri/target/**/bundle/**/*.msi
            apps/desktop/src-tauri/target/**/bundle/**/*.exe
            apps/desktop/src-tauri/target/**/bundle/**/*.zip
          if-no-files-found: warn
